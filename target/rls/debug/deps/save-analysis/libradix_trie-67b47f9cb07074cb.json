{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1","program":"/Users/bailej9/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","radix_trie","--edition=2018","/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=67b47f9cb07074cb","-C","extra-filename=-67b47f9cb07074cb","--out-dir","/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps","-L","dependency=/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps","--extern","endian_type=/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps/libendian_type-f658ef2cf7079e0b.rmeta","--extern","nibble_vec=/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps/libnibble_vec-1a2a4ca9bd5c2bba.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/bailej9/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps/libradix_trie-67b47f9cb07074cb.rmeta"},"prelude":{"crate_id":{"name":"radix_trie","disambiguator":[14164742351722421947,0]},"crate_root":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src","external_crates":[{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7777094053559708767,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10550174156715778454,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8770346864682343241,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8196830942918118636,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12786826162718588903,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7262382603413566750,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12233289566066112318,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4998072162051350919,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14817392966914922723,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13537029249427453884,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16172866892641339196,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[18226255698322429307,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[12872472635654720224,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15477836623066676988,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8883445751219211826,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[4189598673803333586,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":17,"id":{"name":"endian_type","disambiguator":[17653984653796825474,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":18,"id":{"name":"nibble_vec","disambiguator":[3480367437322243495,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","num":19,"id":{"name":"smallvec","disambiguator":[4154225937881419646,0]}}],"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":0,"byte_end":2052,"line_start":1,"line_end":79,"column_start":1,"column_end":51}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":196},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":283,"byte_end":290,"line_start":14,"line_end":14,"column_start":15,"column_end":22},"alias_span":null,"name":"TrieKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":72},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":312,"byte_end":321,"line_start":15,"line_end":15,"column_start":21,"column_end":30},"alias_span":null,"name":"NibbleVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":344,"byte_end":354,"line_start":16,"line_end":16,"column_start":22,"column_end":32},"alias_span":null,"name":"TrieCommon","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":0,"byte_end":2052,"line_start":1,"line_end":79,"column_start":1,"column_end":51},"name":"","qualname":"::","value":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":175},{"krate":0,"index":240},{"krate":0,"index":283},{"krate":0,"index":361},{"krate":0,"index":437},{"krate":0,"index":525},{"krate":0,"index":586},{"krate":0,"index":670},{"krate":0,"index":675},{"krate":0,"index":679},{"krate":0,"index":683},{"krate":0,"index":689},{"krate":0,"index":694},{"krate":0,"index":701},{"krate":0,"index":587}],"decl_id":null,"docs":" A wonderful, fast, safe, generic radix trie implementation.","sig":null,"attributes":[{"value":"/ A wonderful, fast, safe, generic radix trie implementation.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":0,"byte_end":63,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":64,"byte_end":67,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ To get started, see the docs for `Trie` below.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":68,"byte_end":118,"line_start":3,"line_end":3,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":22},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":74},{"krate":0,"index":79},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":97},{"krate":0,"index":103},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":121},{"krate":0,"index":127},{"krate":0,"index":133},{"krate":0,"index":138},{"krate":0,"index":145},{"krate":0,"index":154},{"krate":0,"index":163},{"krate":0,"index":170}],"decl_id":null,"docs":" Iterators over key-value pairs, keys, values and child subtries.\n","sig":null,"attributes":[{"value":"/ Iterators over key-value pairs, keys, values and child subtries.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":2181,"byte_end":2249,"line_start":1,"line_end":1,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":67},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":2749,"byte_end":2753,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" Iterator over the keys and values of a Trie.\n","sig":null,"attributes":[{"value":"/ Iterator over the keys and values of a Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":2689,"byte_end":2737,"line_start":17,"line_end":17,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":2986,"byte_end":2989,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"pub fn new(&'a TrieNode<K, V>) -> Iter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3203,"byte_end":3207,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Keys","qualname":"::iter::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":83}],"decl_id":null,"docs":" Iterator over the keys of a Trie.\n","sig":null,"attributes":[{"value":"/ Iterator over the keys of a Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3154,"byte_end":3191,"line_start":35,"line_end":35,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3382,"byte_end":3385,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Keys>::new","value":"pub fn new(Iter) -> Keys","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3781,"byte_end":3787,"line_start":62,"line_end":62,"column_start":12,"column_end":18},"name":"Values","qualname":"::iter::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":" Iterator over the values of a Trie.\n","sig":null,"attributes":[{"value":"/ Iterator over the values of a Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3730,"byte_end":3769,"line_start":61,"line_end":61,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3968,"byte_end":3971,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<Values>::new","value":"pub fn new(Iter) -> Values","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4383,"byte_end":4391,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"Children","qualname":"::iter::Children","value":"Children {  }","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":" Iterator over the child subtries of a trie.\n","sig":null,"attributes":[{"value":"/ Iterator over the child subtries of a trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4324,"byte_end":4371,"line_start":87,"line_end":87,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4515,"byte_end":4518,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<Children>::new","value":"pub fn new(Nibblet, &'a TrieNode<K, V>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":196},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8080,"byte_end":8087,"line_start":22,"line_end":22,"column_start":11,"column_end":18},"name":"TrieKey","qualname":"::keys::TrieKey","value":"TrieKey: PartialEq + Eq","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":" Trait for types which can be used to key a Radix Trie.","sig":null,"attributes":[{"value":"/ Trait for types which can be used to key a Radix Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7065,"byte_end":7123,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7124,"byte_end":7127,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Types that implement this trait should be convertible to a vector of half-bytes (nibbles)","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7128,"byte_end":7221,"line_start":9,"line_end":9,"column_start":1,"column_end":94}},{"value":"/ such that no two instances of the type convert to the same vector.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7222,"byte_end":7292,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ To protect against faulty behaviour, the trie will **panic** if it finds two distinct keys","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7293,"byte_end":7387,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ of type `K` which encode to the same `Nibblet`, so be careful!","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7388,"byte_end":7454,"line_start":12,"line_end":12,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7455,"byte_end":7458,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ If you would like to implement this trait for your own type, you need to implement","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7459,"byte_end":7545,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/ *either* `encode_bytes` or `encode`. You only need to implement one of the two.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7546,"byte_end":7629,"line_start":15,"line_end":15,"column_start":1,"column_end":84}},{"value":"/ If you don't implement one, your code will **panic** as soon you use the trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7630,"byte_end":7712,"line_start":16,"line_end":16,"column_start":1,"column_end":83}},{"value":"/ There is no performance penalty for implementing `encode_bytes` instead of `encode`,","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7713,"byte_end":7801,"line_start":17,"line_end":17,"column_start":1,"column_end":89}},{"value":"/ so it is preferred except in the case where you require half-byte precision.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7802,"byte_end":7882,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7883,"byte_end":7886,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Many standard types implement this trait already. Integer types are encoded *big-endian*","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7887,"byte_end":7979,"line_start":20,"line_end":20,"column_start":1,"column_end":93}},{"value":"/ by default but can be encoded little-endian using the `LittleEndian<T>` wrapper type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":7980,"byte_end":8069,"line_start":21,"line_end":21,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8158,"byte_end":8170,"line_start":24,"line_end":24,"column_start":8,"column_end":20},"name":"encode_bytes","qualname":"::keys::TrieKey::encode_bytes","value":"pub fn encode_bytes(&Self) -> Vec<u8>","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" Encode a value as a vector of bytes.\n","sig":null,"attributes":[{"value":"/ Encode a value as a vector of bytes.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8110,"byte_end":8150,"line_start":23,"line_end":23,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8318,"byte_end":8324,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"encode","qualname":"::keys::TrieKey::encode","value":"pub fn encode(&Self) -> Nibblet","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" Encode a value as a NibbleVec.\n","sig":null,"attributes":[{"value":"/ Encode a value as a NibbleVec.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8262,"byte_end":8296,"line_start":28,"line_end":28,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8301,"byte_end":8310,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":13766,"byte_end":13769,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"get","qualname":"<SubTrie>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> SubTrieResult<&V> where K: Borrow<Q>,\nQ: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Look up the value for the given key, which should be an extension of this subtrie's key.","sig":null,"attributes":[{"value":"/ Look up the value for the given key, which should be an extension of this subtrie's key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":13512,"byte_end":13604,"line_start":12,"line_end":12,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":13609,"byte_end":13612,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":13617,"byte_end":13705,"line_start":14,"line_end":14,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":13710,"byte_end":13754,"line_start":15,"line_end":15,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14517,"byte_end":14526,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"value_mut","qualname":"<SubTrieMut>::value_mut","value":"pub fn value_mut(&mut Self) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Mutable reference to the node's value.\n","sig":null,"attributes":[{"value":"/ Mutable reference to the node's value.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14463,"byte_end":14505,"line_start":49,"line_end":49,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14853,"byte_end":14856,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"get","qualname":"<SubTrieMut>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> SubTrieResult<&V> where K: Borrow<Q>,\nQ: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Look up the value for the given key, which should be an extension of this subtrie's key.","sig":null,"attributes":[{"value":"/ Look up the value for the given key, which should be an extension of this subtrie's key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14599,"byte_end":14691,"line_start":54,"line_end":54,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14696,"byte_end":14699,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14704,"byte_end":14792,"line_start":56,"line_end":56,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14797,"byte_end":14841,"line_start":57,"line_end":57,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":15127,"byte_end":15133,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"insert","qualname":"<SubTrieMut>::insert","value":"pub fn insert(&mut Self, K, V) -> SubTrieResult<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in this subtrie. The key should be an extension of this subtrie's key.\n","sig":null,"attributes":[{"value":"/ Insert a value in this subtrie. The key should be an extension of this subtrie's key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":15026,"byte_end":15115,"line_start":66,"line_end":66,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":15927,"byte_end":15933,"line_start":90,"line_end":90,"column_start":12,"column_end":18},"name":"remove","qualname":"<SubTrieMut>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> SubTrieResult<V> where\nK: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Remove a value from this subtrie. The key should be an extension of this subtrie's key.","sig":null,"attributes":[{"value":"/ Remove a value from this subtrie. The key should be an extension of this subtrie's key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":15674,"byte_end":15765,"line_start":86,"line_end":86,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":15770,"byte_end":15773,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":15778,"byte_end":15866,"line_start":88,"line_end":88,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":15871,"byte_end":15915,"line_start":89,"line_end":89,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":16823,"byte_end":16826,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"get","qualname":"<TrieNode<K, V>>::get","value":"pub fn get(&Self, &Nibblet) -> Option<&TrieNode<K, V>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":16802,"byte_end":16811,"line_start":16,"line_end":16,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":16940,"byte_end":16947,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<TrieNode<K, V>>::get_mut","value":"pub fn get_mut(&mut Self, &Nibblet) -> Option<&mut TrieNode<K, V>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":16919,"byte_end":16928,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17073,"byte_end":17079,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"insert","qualname":"<TrieNode<K, V>>::insert","value":"pub fn insert(&mut Self, K, V, Nibblet) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17052,"byte_end":17061,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17215,"byte_end":17221,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"remove","qualname":"<TrieNode<K, V>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: TrieKey","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17194,"byte_end":17203,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17391,"byte_end":17403,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"get_ancestor","qualname":"<TrieNode<K, V>>::get_ancestor","value":"pub fn get_ancestor(&Self, &Nibblet) -> Option<(&TrieNode<K, V>, usize)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17370,"byte_end":17379,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17525,"byte_end":17541,"line_start":41,"line_end":41,"column_start":12,"column_end":28},"name":"get_raw_ancestor","qualname":"<TrieNode<K, V>>::get_raw_ancestor","value":"pub fn get_raw_ancestor(&Self, &Nibblet) -> (&TrieNode<K, V>, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17504,"byte_end":17513,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17659,"byte_end":17677,"line_start":45,"line_end":45,"column_start":12,"column_end":30},"name":"get_raw_descendant","qualname":"<TrieNode<K, V>>::get_raw_descendant","value":"pub fn get_raw_descendant<'a>(&'a Self, &Nibblet) -> Option<DescendantResult>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":17638,"byte_end":17647,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":349},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":27251,"byte_end":27265,"line_start":352,"line_end":352,"column_start":5,"column_end":19},"name":"NoModification","qualname":"::traversal::DescendantResult::NoModification","value":"DescendantResult::NoModification(&'a TrieNode<K, V>)","parent":{"krate":0,"index":345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":352},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":27291,"byte_end":27300,"line_start":353,"line_end":353,"column_start":5,"column_end":14},"name":"ExtendKey","qualname":"::traversal::DescendantResult::ExtendKey","value":"DescendantResult::ExtendKey(&'a TrieNode<K, V>, usize, &'a Nibblet)","parent":{"krate":0,"index":345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":345},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":27210,"byte_end":27226,"line_start":351,"line_end":351,"column_start":10,"column_end":26},"name":"DescendantResult","qualname":"::traversal::DescendantResult","value":"pub enum DescendantResult<'a, K: 'a, V: 'a> {\n    NoModification(&'a TrieNode<K, V>),\n    ExtendKey(&'a TrieNode<K, V>, usize, &'a Nibblet),\n}","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":352}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28607,"byte_end":28610,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<Trie<K, V>>::new","value":"pub fn new() -> Trie<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create an empty Trie.\n","sig":null,"attributes":[{"value":"/ Create an empty Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28556,"byte_end":28581,"line_start":12,"line_end":12,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28586,"byte_end":28595,"line_start":13,"line_end":13,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28969,"byte_end":28972,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"get","qualname":"<Trie<K, V>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Fetch a reference to the given key's corresponding value, if any.","sig":null,"attributes":[{"value":"/ Fetch a reference to the given key's corresponding value, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28723,"byte_end":28792,"line_start":21,"line_end":21,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28797,"byte_end":28800,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28805,"byte_end":28893,"line_start":23,"line_end":23,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28898,"byte_end":28943,"line_start":24,"line_end":24,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28948,"byte_end":28957,"line_start":25,"line_end":25,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29478,"byte_end":29485,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Trie<K, V>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Fetch a mutable reference to the given key's corresponding value, if any.","sig":null,"attributes":[{"value":"/ Fetch a mutable reference to the given key's corresponding value, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29224,"byte_end":29301,"line_start":37,"line_end":37,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29306,"byte_end":29309,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29314,"byte_end":29402,"line_start":39,"line_end":39,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29407,"byte_end":29452,"line_start":40,"line_end":40,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29457,"byte_end":29466,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29869,"byte_end":29875,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"insert","qualname":"<Trie<K, V>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert the given key-value pair, returning any previous value associated with the key.\n","sig":null,"attributes":[{"value":"/ Insert the given key-value pair, returning any previous value associated with the key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29753,"byte_end":29843,"line_start":53,"line_end":53,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":29848,"byte_end":29857,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30352,"byte_end":30358,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"remove","qualname":"<Trie<K, V>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Remove the value associated with the given key.","sig":null,"attributes":[{"value":"/ Remove the value associated with the given key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30124,"byte_end":30175,"line_start":64,"line_end":64,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30180,"byte_end":30183,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30188,"byte_end":30276,"line_start":66,"line_end":66,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30281,"byte_end":30326,"line_start":67,"line_end":67,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30331,"byte_end":30340,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30685,"byte_end":30694,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"value_mut","qualname":"<Trie<K, V>>::value_mut","value":"pub fn value_mut(&mut Self) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value stored at this node, if any.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the value stored at this node, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30604,"byte_end":30673,"line_start":81,"line_end":81,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30997,"byte_end":31004,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"subtrie","qualname":"<Trie<K, V>>::subtrie","value":"pub fn subtrie<'a, Q: ?Sized>(&'a Self, &Q) -> Option<SubTrie> where\nK: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Fetch a reference to the subtrie for a given key.","sig":null,"attributes":[{"value":"/ Fetch a reference to the subtrie for a given key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30767,"byte_end":30820,"line_start":86,"line_end":86,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30825,"byte_end":30828,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30833,"byte_end":30921,"line_start":88,"line_end":88,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30926,"byte_end":30971,"line_start":89,"line_end":89,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":30976,"byte_end":30985,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31524,"byte_end":31535,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"subtrie_mut","qualname":"<Trie<K, V>>::subtrie_mut","value":"pub fn subtrie_mut<'a, Q: ?Sized>(&'a mut Self, &Q) -> Option<SubTrieMut>\nwhere K: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Fetch a mutable reference to the subtrie for a given key.","sig":null,"attributes":[{"value":"/ Fetch a mutable reference to the subtrie for a given key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31286,"byte_end":31347,"line_start":102,"line_end":102,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31352,"byte_end":31355,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31360,"byte_end":31448,"line_start":104,"line_end":104,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31453,"byte_end":31498,"line_start":105,"line_end":105,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31503,"byte_end":31512,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32412,"byte_end":32424,"line_start":130,"line_end":130,"column_start":12,"column_end":24},"name":"get_ancestor","qualname":"<Trie<K, V>>::get_ancestor","value":"pub fn get_ancestor<'a, Q: ?Sized>(&'a Self, &Q) -> Option<SubTrie> where\nK: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Fetch a reference to the closest ancestor node of the given key.","sig":null,"attributes":[{"value":"/ Fetch a reference to the closest ancestor node of the given key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31892,"byte_end":31960,"line_start":119,"line_end":119,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31965,"byte_end":31968,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ If `key` is encoded as byte-vector `b`, return the node `n` in the tree","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":31973,"byte_end":32048,"line_start":121,"line_end":121,"column_start":5,"column_end":80}},{"value":"/ such that `n`'s key's byte-vector is the longest possible prefix of `b`, and `n`","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32053,"byte_end":32137,"line_start":122,"line_end":122,"column_start":5,"column_end":89}},{"value":"/ has a value.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32142,"byte_end":32158,"line_start":123,"line_end":123,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32163,"byte_end":32166,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Invariant: `result.is_some() => result.key_value.is_some()`.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32171,"byte_end":32235,"line_start":125,"line_end":125,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32240,"byte_end":32243,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32248,"byte_end":32336,"line_start":127,"line_end":127,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32341,"byte_end":32386,"line_start":128,"line_end":128,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32391,"byte_end":32400,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33133,"byte_end":33151,"line_start":151,"line_end":151,"column_start":12,"column_end":30},"name":"get_ancestor_value","qualname":"<Trie<K, V>>::get_ancestor_value","value":"pub fn get_ancestor_value<Q: ?Sized>(&Self, &Q) -> Option<&V> where\nK: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Fetch the closest ancestor *value* for a given key.","sig":null,"attributes":[{"value":"/ Fetch the closest ancestor *value* for a given key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32818,"byte_end":32873,"line_start":144,"line_end":144,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32878,"byte_end":32881,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ See `get_ancestor` for precise semantics, this is just a shortcut.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32886,"byte_end":32956,"line_start":146,"line_end":146,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32961,"byte_end":32964,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":32969,"byte_end":33057,"line_start":148,"line_end":148,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33062,"byte_end":33107,"line_start":149,"line_end":149,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33112,"byte_end":33121,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33485,"byte_end":33501,"line_start":162,"line_end":162,"column_start":12,"column_end":28},"name":"get_raw_ancestor","qualname":"<Trie<K, V>>::get_raw_ancestor","value":"pub fn get_raw_ancestor<'a, Q: ?Sized>(&'a Self, &Q) -> SubTrie where\nK: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed\n form *must* match those for the key type\n","sig":null,"attributes":[{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33322,"byte_end":33410,"line_start":159,"line_end":159,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33415,"byte_end":33459,"line_start":160,"line_end":160,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33464,"byte_end":33473,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34092,"byte_end":34110,"line_start":180,"line_end":180,"column_start":12,"column_end":30},"name":"get_raw_descendant","qualname":"<Trie<K, V>>::get_raw_descendant","value":"pub fn get_raw_descendant<'a, Q: ?Sized>(&'a Self, &Q) -> Option<SubTrie>\nwhere K: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Fetch the closest descendant for a given key.","sig":null,"attributes":[{"value":"/ Fetch the closest descendant for a given key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33793,"byte_end":33842,"line_start":173,"line_end":173,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33847,"byte_end":33850,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ If the key is in the trie, this is the same as `subtrie`.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33855,"byte_end":33916,"line_start":175,"line_end":175,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33921,"byte_end":33924,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":33929,"byte_end":34017,"line_start":177,"line_end":177,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34022,"byte_end":34066,"line_start":178,"line_end":178,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34071,"byte_end":34080,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34807,"byte_end":34823,"line_start":202,"line_end":202,"column_start":12,"column_end":28},"name":"map_with_default","qualname":"<Trie<K, V>>::map_with_default","value":"pub fn map_with_default<F>(&mut Self, K, F, V) where F: Fn(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Take a function `f` and apply it to the value stored at `key`.","sig":null,"attributes":[{"value":"/ Take a function `f` and apply it to the value stored at `key`.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34650,"byte_end":34716,"line_start":198,"line_end":198,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34721,"byte_end":34724,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ If no value is stored at `key`, store `default`.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34729,"byte_end":34781,"line_start":200,"line_end":200,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":34786,"byte_end":34795,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":35218,"byte_end":35233,"line_start":218,"line_end":218,"column_start":12,"column_end":27},"name":"check_integrity","qualname":"<Trie<K, V>>::check_integrity","value":"pub fn check_integrity(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the Trie invariants are satisfied - you shouldn't ever have to call this!\n Quite slow!\n","sig":null,"attributes":[{"value":"/ Check that the Trie invariants are satisfied - you shouldn't ever have to call this!","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":35079,"byte_end":35167,"line_start":215,"line_end":215,"column_start":5,"column_end":93}},{"value":"/ Quite slow!","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":35172,"byte_end":35187,"line_start":216,"line_end":216,"column_start":5,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36002,"byte_end":36012,"line_start":8,"line_end":8,"column_start":11,"column_end":21},"name":"TrieCommon","qualname":"::trie_common::TrieCommon","value":"TrieCommon<'a, K: 'a, V: 'a>: ContainsTrieNode","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" Common functionality available for tries and subtries.\n","sig":null,"attributes":[{"value":"/ Common functionality available for tries and subtries.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":35933,"byte_end":35991,"line_start":7,"line_end":7,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36170,"byte_end":36173,"line_start":15,"line_end":15,"column_start":8,"column_end":11},"name":"key","qualname":"::trie_common::TrieCommon::key","value":"pub fn key(Self) -> Option<&'a K>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Get the key stored at this node, if any.\n","sig":null,"attributes":[{"value":"/ Get the key stored at this node, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36104,"byte_end":36148,"line_start":13,"line_end":13,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36153,"byte_end":36162,"line_start":14,"line_end":14,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36309,"byte_end":36314,"line_start":21,"line_end":21,"column_start":8,"column_end":13},"name":"value","qualname":"::trie_common::TrieCommon::value","value":"pub fn value(Self) -> Option<&'a V>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Get the value stored at this node, if any.\n","sig":null,"attributes":[{"value":"/ Get the value stored at this node, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36241,"byte_end":36287,"line_start":19,"line_end":19,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36292,"byte_end":36301,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36442,"byte_end":36445,"line_start":26,"line_end":26,"column_start":8,"column_end":11},"name":"len","qualname":"::trie_common::TrieCommon::len","value":"pub fn len(Self) -> usize","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Number of key/value pairs stored in this trie.\n","sig":null,"attributes":[{"value":"/ Number of key/value pairs stored in this trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36384,"byte_end":36434,"line_start":25,"line_end":25,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36542,"byte_end":36550,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::trie_common::TrieCommon::is_empty","value":"pub fn is_empty(Self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Determine if the Trie contains 0 key-value pairs.\n","sig":null,"attributes":[{"value":"/ Determine if the Trie contains 0 key-value pairs.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36467,"byte_end":36520,"line_start":28,"line_end":28,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36525,"byte_end":36534,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36683,"byte_end":36690,"line_start":36,"line_end":36,"column_start":8,"column_end":15},"name":"is_leaf","qualname":"::trie_common::TrieCommon::is_leaf","value":"pub fn is_leaf(Self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Determine if the trie is a leaf node (has no children).\n","sig":null,"attributes":[{"value":"/ Determine if the trie is a leaf node (has no children).","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36602,"byte_end":36661,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36666,"byte_end":36675,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36842,"byte_end":36846,"line_start":42,"line_end":42,"column_start":8,"column_end":12},"name":"iter","qualname":"::trie_common::TrieCommon::iter","value":"pub fn iter(Self) -> Iter","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Return an iterator over the keys and values of the Trie.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys and values of the Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36760,"byte_end":36820,"line_start":40,"line_end":40,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36825,"byte_end":36834,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36991,"byte_end":36995,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"keys","qualname":"::trie_common::TrieCommon::keys","value":"pub fn keys(Self) -> Keys","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the Trie.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36920,"byte_end":36969,"line_start":46,"line_end":46,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36974,"byte_end":36983,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37137,"byte_end":37143,"line_start":54,"line_end":54,"column_start":8,"column_end":14},"name":"values","qualname":"::trie_common::TrieCommon::values","value":"pub fn values(Self) -> Values","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Return an iterator over the values of the Trie.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the Trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37064,"byte_end":37115,"line_start":52,"line_end":52,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37120,"byte_end":37129,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37284,"byte_end":37292,"line_start":59,"line_end":59,"column_start":8,"column_end":16},"name":"children","qualname":"::trie_common::TrieCommon::children","value":"pub fn children(Self) -> Children","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Return an iterator over the child subtries of this node.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the child subtries of this node.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37216,"byte_end":37276,"line_start":58,"line_end":58,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37381,"byte_end":37387,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"prefix","qualname":"::trie_common::TrieCommon::prefix","value":"pub fn prefix(Self) -> &'a Nibblet","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Get the prefix of this node.\n","sig":null,"attributes":[{"value":"/ Get the prefix of this node.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37327,"byte_end":37359,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37364,"byte_end":37373,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":472},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37537,"byte_end":37553,"line_start":69,"line_end":69,"column_start":11,"column_end":27},"name":"ContainsTrieNode","qualname":"::trie_common::ContainsTrieNode","value":"ContainsTrieNode<'a, K: 'a, V: 'a>","parent":null,"children":[{"krate":0,"index":476}],"decl_id":null,"docs":" Helper trait for Trie/SubTrie/SubTrieMut, which all contain a trie node.\n","sig":null,"attributes":[{"value":"/ Helper trait for Trie/SubTrie/SubTrieMut, which all contain a trie node.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37450,"byte_end":37526,"line_start":68,"line_end":68,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":37603,"byte_end":37612,"line_start":73,"line_end":73,"column_start":8,"column_end":17},"name":"trie_node","qualname":"::trie_common::ContainsTrieNode::trie_node","value":"pub fn trie_node(Self) -> &'a TrieNode<K, V>","parent":{"krate":0,"index":472},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":641},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":39985,"byte_end":39993,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"TrieNode","qualname":"::trie_node::TrieNode","value":"TrieNode { key, key_value, child_count, children }","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":644},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40184,"byte_end":40187,"line_start":12,"line_end":12,"column_start":9,"column_end":12},"name":"key","qualname":"::trie_node::TrieNode::key","value":"nibble_vec::NibbleVec<[u8; 64]>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Key fragments/bits associated with this node, such that joining the keys from all\n parent nodes and this node is equal to the bit-encoding of this node's key.\n","sig":null,"attributes":[{"value":"/ Key fragments/bits associated with this node, such that joining the keys from all","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40006,"byte_end":40091,"line_start":10,"line_end":10,"column_start":5,"column_end":90}},{"value":"/ parent nodes and this node is equal to the bit-encoding of this node's key.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40096,"byte_end":40175,"line_start":11,"line_end":11,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":645},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40254,"byte_end":40263,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"key_value","qualname":"::trie_node::TrieNode::key_value","value":"std::option::Option<std::boxed::Box<trie_node::KeyValue<K, V>>>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" The key and value stored at this node.\n","sig":null,"attributes":[{"value":"/ The key and value stored at this node.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40203,"byte_end":40245,"line_start":14,"line_end":14,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":646},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40367,"byte_end":40378,"line_start":18,"line_end":18,"column_start":9,"column_end":20},"name":"child_count","qualname":"::trie_node::TrieNode::child_count","value":"usize","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" The number of children which are Some rather than None.\n","sig":null,"attributes":[{"value":"/ The number of children which are Some rather than None.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40299,"byte_end":40358,"line_start":17,"line_end":17,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":647},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40519,"byte_end":40527,"line_start":22,"line_end":22,"column_start":9,"column_end":17},"name":"children","qualname":"::trie_node::TrieNode::children","value":"[std::option::Option<std::boxed::Box<trie_node::TrieNode<K, V>>>; _]","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" The children of this node stored such that the first nibble of each child key\n dictates the child's bucket.\n","sig":null,"attributes":[{"value":"/ The children of this node stored such that the first nibble of each child key","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40392,"byte_end":40473,"line_start":20,"line_end":20,"column_start":5,"column_end":86}},{"value":"/ dictates the child's bucket.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40478,"byte_end":40510,"line_start":21,"line_end":21,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":657},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40613,"byte_end":40621,"line_start":26,"line_end":26,"column_start":12,"column_end":20},"name":"KeyValue","qualname":"::trie_node::KeyValue","value":"KeyValue { key, value }","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":660},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40638,"byte_end":40641,"line_start":27,"line_end":27,"column_start":9,"column_end":12},"name":"key","qualname":"::trie_node::KeyValue::key","value":"K","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":661},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40654,"byte_end":40659,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"value","qualname":"::trie_node::KeyValue::value","value":"V","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40792,"byte_end":40795,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<TrieNode<K, V>>::new","value":"pub fn new() -> TrieNode<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create a value-less, child-less TrieNode.\n","sig":null,"attributes":[{"value":"/ Create a value-less, child-less TrieNode.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40721,"byte_end":40766,"line_start":35,"line_end":35,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40771,"byte_end":40780,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41055,"byte_end":41069,"line_start":48,"line_end":48,"column_start":12,"column_end":26},"name":"with_key_value","qualname":"<TrieNode<K, V>>::with_key_value","value":"pub fn with_key_value(Nibblet, K, V) -> TrieNode<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create a TrieNode with no children.\n","sig":null,"attributes":[{"value":"/ Create a TrieNode with no children.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40990,"byte_end":41029,"line_start":46,"line_end":46,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41034,"byte_end":41043,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41465,"byte_end":41468,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"key","qualname":"<TrieNode<K, V>>::key","value":"pub fn key(&Self) -> Option<&K>","parent":null,"children":[],"decl_id":null,"docs":" Get the key stored at this node, if any.\n","sig":null,"attributes":[{"value":"/ Get the key stored at this node, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41395,"byte_end":41439,"line_start":60,"line_end":60,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41444,"byte_end":41453,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41625,"byte_end":41630,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"value","qualname":"<TrieNode<K, V>>::value","value":"pub fn value(&Self) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Get the value stored at this node, if any.\n","sig":null,"attributes":[{"value":"/ Get the value stored at this node, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41553,"byte_end":41599,"line_start":66,"line_end":66,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41604,"byte_end":41613,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41812,"byte_end":41821,"line_start":74,"line_end":74,"column_start":12,"column_end":21},"name":"value_mut","qualname":"<TrieNode<K, V>>::value_mut","value":"pub fn value_mut(&mut Self) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value stored at this node, if any.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the value stored at this node, if any.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41717,"byte_end":41786,"line_start":72,"line_end":72,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41791,"byte_end":41800,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42143,"byte_end":42156,"line_start":83,"line_end":83,"column_start":12,"column_end":25},"name":"value_checked","qualname":"<TrieNode<K, V>>::value_checked","value":"pub fn value_checked<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>,\nQ: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Get the value whilst checking a key match.","sig":null,"attributes":[{"value":"/ Get the value whilst checking a key match.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41920,"byte_end":41966,"line_start":78,"line_end":78,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41971,"byte_end":41974,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":41979,"byte_end":42067,"line_start":80,"line_end":80,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42072,"byte_end":42117,"line_start":81,"line_end":81,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42122,"byte_end":42131,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42618,"byte_end":42635,"line_start":99,"line_end":99,"column_start":12,"column_end":29},"name":"value_checked_mut","qualname":"<TrieNode<K, V>>::value_checked_mut","value":"pub fn value_checked_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where\nK: Borrow<Q>, Q: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable value whilst checking a key match.","sig":null,"attributes":[{"value":"/ Get a mutable value whilst checking a key match.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42389,"byte_end":42441,"line_start":94,"line_end":94,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42446,"byte_end":42449,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42454,"byte_end":42542,"line_start":96,"line_end":96,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42547,"byte_end":42592,"line_start":97,"line_end":97,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42597,"byte_end":42606,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42971,"byte_end":42983,"line_start":112,"line_end":112,"column_start":12,"column_end":24},"name":"compute_size","qualname":"<TrieNode<K, V>>::compute_size","value":"pub fn compute_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the number of keys and values in this node's subtrie.\n","sig":null,"attributes":[{"value":"/ Compute the number of keys and values in this node's subtrie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42880,"byte_end":42945,"line_start":110,"line_end":110,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":42950,"byte_end":42959,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43392,"byte_end":43401,"line_start":127,"line_end":127,"column_start":12,"column_end":21},"name":"add_child","qualname":"<TrieNode<K, V>>::add_child","value":"pub fn add_child(&mut Self, usize, Box<TrieNode<K, V>>)","parent":null,"children":[],"decl_id":null,"docs":" Add a child at the given index, given that none exists there already.\n","sig":null,"attributes":[{"value":"/ Add a child at the given index, given that none exists there already.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43293,"byte_end":43366,"line_start":125,"line_end":125,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43371,"byte_end":43380,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43668,"byte_end":43678,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"take_child","qualname":"<TrieNode<K, V>>::take_child","value":"pub fn take_child(&mut Self, usize) -> Option<Box<TrieNode<K, V>>>","parent":null,"children":[],"decl_id":null,"docs":" Remove a child at the given index, if it exists.\n","sig":null,"attributes":[{"value":"/ Remove a child at the given index, if it exists.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43590,"byte_end":43642,"line_start":133,"line_end":133,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43647,"byte_end":43656,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43942,"byte_end":43957,"line_start":144,"line_end":144,"column_start":12,"column_end":27},"name":"take_only_child","qualname":"<TrieNode<K, V>>::take_only_child","value":"pub fn take_only_child(&mut Self) -> Box<TrieNode<K, V>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for removing the single child of a node.\n","sig":null,"attributes":[{"value":"/ Helper function for removing the single child of a node.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43856,"byte_end":43916,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":43921,"byte_end":43930,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44365,"byte_end":44378,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"add_key_value","qualname":"<TrieNode<K, V>>::add_key_value","value":"pub fn add_key_value(&mut Self, K, V)","parent":null,"children":[],"decl_id":null,"docs":" Set the key and value of a node, given that it currently lacks one.\n","sig":null,"attributes":[{"value":"/ Set the key and value of a node, given that it currently lacks one.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44268,"byte_end":44339,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44344,"byte_end":44353,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44826,"byte_end":44836,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"take_value","qualname":"<TrieNode<K, V>>::take_value","value":"pub fn take_value<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: TrieKey","parent":null,"children":[],"decl_id":null,"docs":" Move the value out of a node, whilst checking that its key is as expected.\n Can panic (see check_keys).","sig":null,"attributes":[{"value":"/ Move the value out of a node, whilst checking that its key is as expected.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44536,"byte_end":44614,"line_start":161,"line_end":161,"column_start":5,"column_end":83}},{"value":"/ Can panic (see check_keys).","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44619,"byte_end":44650,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44655,"byte_end":44658,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the trie's key type, but TrieKey on the borrowed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44663,"byte_end":44751,"line_start":164,"line_end":164,"column_start":5,"column_end":93}},{"value":"/ form *must* match those for the key type","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44756,"byte_end":44800,"line_start":165,"line_end":165,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":44805,"byte_end":44814,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45162,"byte_end":45175,"line_start":180,"line_end":180,"column_start":12,"column_end":25},"name":"replace_value","qualname":"<TrieNode<K, V>>::replace_value","value":"pub fn replace_value(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Replace a value, returning the previous value if there was one.\n","sig":null,"attributes":[{"value":"/ Replace a value, returning the previous value if there was one.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45069,"byte_end":45136,"line_start":178,"line_end":178,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45141,"byte_end":45150,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45443,"byte_end":45456,"line_start":189,"line_end":189,"column_start":12,"column_end":25},"name":"as_value_node","qualname":"<TrieNode<K, V>>::as_value_node","value":"pub fn as_value_node(&Self) -> Option<&TrieNode<K, V>>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this node if it has a value.\n","sig":null,"attributes":[{"value":"/ Get a reference to this node if it has a value.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45366,"byte_end":45417,"line_start":187,"line_end":187,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45422,"byte_end":45431,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45686,"byte_end":45691,"line_start":196,"line_end":196,"column_start":12,"column_end":17},"name":"split","qualname":"<TrieNode<K, V>>::split","value":"pub fn split(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Split a node at a given index in its key, transforming it into a prefix node of its\n previous self.\n","sig":null,"attributes":[{"value":"/ Split a node at a given index in its key, transforming it into a prefix node of its","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45550,"byte_end":45637,"line_start":193,"line_end":193,"column_start":5,"column_end":92}},{"value":"/ previous self.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45642,"byte_end":45660,"line_start":194,"line_end":194,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":45665,"byte_end":45674,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":46597,"byte_end":46607,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"as_subtrie","qualname":"<TrieNode<K, V>>::as_subtrie","value":"pub fn as_subtrie(&Self, Nibblet) -> SubTrie<, K, V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":46576,"byte_end":46585,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":46762,"byte_end":46776,"line_start":233,"line_end":233,"column_start":12,"column_end":26},"name":"as_subtrie_mut","qualname":"<TrieNode<K, V>>::as_subtrie_mut","value":"pub fn as_subtrie_mut<'a>(&'a mut Self, Nibblet, &'a mut usize) -> SubTrieMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":46741,"byte_end":46750,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":47214,"byte_end":47239,"line_start":248,"line_end":248,"column_start":12,"column_end":37},"name":"check_integrity_recursive","qualname":"<TrieNode<K, V>>::check_integrity_recursive","value":"pub fn check_integrity_recursive(&Self, &Nibblet) -> (bool, usize)","parent":null,"children":[],"decl_id":null,"docs":" Check the integrity of a trie subtree (quite costly).\n Return true and the size of the subtree if all checks are successful,\n or false and a junk value if any test fails.\n","sig":null,"attributes":[{"value":"/ Check the integrity of a trie subtree (quite costly).","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":47014,"byte_end":47071,"line_start":245,"line_end":245,"column_start":5,"column_end":62}},{"value":"/ Return true and the size of the subtree if all checks are successful,","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":47076,"byte_end":47149,"line_start":246,"line_end":246,"column_start":5,"column_end":78}},{"value":"/ or false and a junk value if any test fails.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":47154,"byte_end":47202,"line_start":247,"line_end":247,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":670},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1204,"byte_end":1208,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"Trie","qualname":"::Trie","value":"Trie {  }","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674}],"decl_id":null,"docs":" Data-structure for storing and querying string-like keys and associated values.","sig":null,"attributes":[{"value":"/ Data-structure for storing and querying string-like keys and associated values.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":649,"byte_end":732,"line_start":40,"line_end":40,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":733,"byte_end":736,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Any keys which share a common *prefix* are stored below a single copy of that prefix.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":737,"byte_end":826,"line_start":42,"line_end":42,"column_start":1,"column_end":90}},{"value":"/ This saves space, and also allows the longest prefix of any given key to be found.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":827,"byte_end":913,"line_start":43,"line_end":43,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":914,"byte_end":917,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ You can read more about Radix Tries on [Wikipedia][radix-wiki].","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":918,"byte_end":985,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":986,"byte_end":989,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Lots of the methods on `Trie` return optional values - they can be composed","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":990,"byte_end":1069,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ nicely using `Option::and_then`.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1070,"byte_end":1106,"line_start":48,"line_end":48,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1107,"byte_end":1110,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ [radix-wiki]: http://en.wikipedia.org/wiki/Radix_tree","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1111,"byte_end":1168,"line_start":50,"line_end":50,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1466,"byte_end":1473,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"SubTrie","qualname":"::SubTrie","value":"SubTrie {  }","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" Immutable view of a sub-tree a larger trie.\n","sig":null,"attributes":[{"value":"/ Immutable view of a sub-tree a larger trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1390,"byte_end":1437,"line_start":59,"line_end":59,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":694},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1625,"byte_end":1635,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"SubTrieMut","qualname":"::SubTrieMut","value":"SubTrieMut {  }","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700}],"decl_id":null,"docs":" Mutable view of a sub-tree of a larger trie.\n","sig":null,"attributes":[{"value":"/ Mutable view of a sub-tree of a larger trie.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1548,"byte_end":1596,"line_start":66,"line_end":66,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":587},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":2011,"byte_end":2024,"line_start":79,"line_end":79,"column_start":10,"column_end":23},"name":"SubTrieResult","qualname":"::SubTrieResult","value":"Result<Option<T>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Wrapper for subtrie lookup results.","sig":null,"attributes":[{"value":"/ Wrapper for subtrie lookup results.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1741,"byte_end":1780,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1781,"byte_end":1784,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ When fetching from a subtrie, if the prefix is wrong you'll get an `Err(())`.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1785,"byte_end":1866,"line_start":76,"line_end":76,"column_start":1,"column_end":82}},{"value":"/ Otherwise you'll get an `Ok(_)`, where the contained option value is what would ordinarily","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1867,"byte_end":1961,"line_start":77,"line_end":77,"column_start":1,"column_end":95}},{"value":"/ be returned by get/insert/whatever.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":1962,"byte_end":2001,"line_start":78,"line_end":78,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":2883,"byte_end":2887,"line_start":24,"line_end":24,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3354,"byte_end":3358,"line_start":42,"line_end":42,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3612,"byte_end":3616,"line_start":53,"line_end":53,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3938,"byte_end":3944,"line_start":68,"line_end":68,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4204,"byte_end":4210,"line_start":79,"line_end":79,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4483,"byte_end":4491,"line_start":93,"line_end":93,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4698,"byte_end":4706,"line_start":102,"line_end":102,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4968,"byte_end":4976,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":5532,"byte_end":5536,"line_start":134,"line_end":134,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":6676,"byte_end":6680,"line_start":173,"line_end":173,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":9908,"byte_end":9911,"line_start":89,"line_end":89,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":10128,"byte_end":10134,"line_start":103,"line_end":103,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11034,"byte_end":11041,"line_start":150,"line_end":150,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11240,"byte_end":11244,"line_start":159,"line_end":159,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11409,"byte_end":11421,"line_start":166,"line_end":166,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11559,"byte_end":11568,"line_start":175,"line_end":175,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":13466,"byte_end":13473,"line_start":8,"line_end":8,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14414,"byte_end":14424,"line_start":45,"line_end":45,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":16759,"byte_end":16767,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28517,"byte_end":28521,"line_start":8,"line_end":8,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":406},{"krate":0,"index":410},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":424},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":35402,"byte_end":35406,"line_start":224,"line_end":224,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":35733,"byte_end":35737,"line_start":240,"line_end":240,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":38750,"byte_end":38760,"line_start":127,"line_end":127,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":38931,"byte_end":38941,"line_start":137,"line_end":137,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40678,"byte_end":40686,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":49192,"byte_end":49200,"line_start":306,"line_end":306,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/lib.rs","byte_start":441,"byte_end":445,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":22}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":2883,"byte_end":2887,"line_start":24,"line_end":24,"column_start":16,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":67},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3354,"byte_end":3358,"line_start":42,"line_end":42,"column_start":16,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3612,"byte_end":3616,"line_start":53,"line_end":53,"column_start":29,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":7383}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":3938,"byte_end":3944,"line_start":68,"line_end":68,"column_start":16,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4204,"byte_end":4210,"line_start":79,"line_end":79,"column_start":29,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":103},"to":{"krate":2,"index":7383}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4483,"byte_end":4491,"line_start":93,"line_end":93,"column_start":16,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4698,"byte_end":4706,"line_start":102,"line_end":102,"column_start":29,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":127},"to":{"krate":2,"index":7383}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":4968,"byte_end":4976,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":5532,"byte_end":5536,"line_start":134,"line_end":134,"column_start":29,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":67},"to":{"krate":2,"index":7383}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/iter.rs","byte_start":6676,"byte_end":6680,"line_start":173,"line_end":173,"column_start":37,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":7216}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8089,"byte_end":8098,"line_start":22,"line_end":22,"column_start":20,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2531},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":8101,"byte_end":8103,"line_start":22,"line_end":22,"column_start":32,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2536},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":9908,"byte_end":9911,"line_start":89,"line_end":89,"column_start":18,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":5,"index":6801},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":10128,"byte_end":10134,"line_start":103,"line_end":103,"column_start":18,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":5,"index":7314},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11034,"byte_end":11041,"line_start":150,"line_end":150,"column_start":18,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":1,"index":6642},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11240,"byte_end":11244,"line_start":159,"line_end":159,"column_start":18,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":6749},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11409,"byte_end":11421,"line_start":166,"line_end":166,"column_start":21,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":17,"index":161},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/keys.rs","byte_start":11559,"byte_end":11568,"line_start":175,"line_end":175,"column_start":21,"column_end":30},"kind":{"Impl":{"id":18}},"from":{"krate":17,"index":64},"to":{"krate":0,"index":196}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":13466,"byte_end":13473,"line_start":8,"line_end":8,"column_start":16,"column_end":23},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/subtrie.rs","byte_start":14414,"byte_end":14424,"line_start":45,"line_end":45,"column_start":16,"column_end":26},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/traversal.rs","byte_start":16759,"byte_end":16767,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":28517,"byte_end":28521,"line_start":8,"line_end":8,"column_start":12,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":35402,"byte_end":35406,"line_start":224,"line_end":224,"column_start":26,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":2531}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie.rs","byte_start":35733,"byte_end":35737,"line_start":240,"line_end":240,"column_start":33,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":2858}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":36032,"byte_end":36048,"line_start":8,"line_end":8,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":472},"to":{"krate":0,"index":458}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":38750,"byte_end":38760,"line_start":127,"line_end":127,"column_start":55,"column_end":65},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":694},"to":{"krate":0,"index":472}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_common.rs","byte_start":38931,"byte_end":38941,"line_start":137,"line_end":137,"column_start":49,"column_end":59},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":694},"to":{"krate":0,"index":458}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":40678,"byte_end":40686,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/radix_trie-0.2.1/src/trie_node.rs","byte_start":49192,"byte_end":49200,"line_start":306,"line_end":306,"column_start":33,"column_end":41},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":641},"to":{"krate":2,"index":2858}}]}