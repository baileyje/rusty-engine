{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1","program":"/Users/bailej9/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","memmem","/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=01452b236d5c489e","-C","extra-filename=-01452b236d5c489e","--out-dir","/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps","-L","dependency=/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/bailej9/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/bailej9/dev/personal/rusty_engine/target/rls/debug/deps/libmemmem-01452b236d5c489e.rmeta"},"prelude":{"crate_id":{"name":"memmem","disambiguator":[1073476901397567246,0]},"crate_root":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src","external_crates":[{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7777094053559708767,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10550174156715778454,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8770346864682343241,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8196830942918118636,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12786826162718588903,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7262382603413566750,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12233289566066112318,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4998072162051350919,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14817392966914922723,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13537029249427453884,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16172866892641339196,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[18226255698322429307,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[12872472635654720224,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15477836623066676988,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8883445751219211826,0]}},{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[4189598673803333586,0]}}],"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":333,"byte_end":1074,"line_start":9,"line_end":33,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":33},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":822,"byte_end":836,"line_start":27,"line_end":27,"column_start":18,"column_end":32},"alias_span":null,"name":"TwoWaySearcher","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":333,"byte_end":1074,"line_start":9,"line_end":33,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":28},{"krate":0,"index":31}],"decl_id":null,"docs":"A crate for string searching. The main trait is `Searcher`, which has a function for finding fixed\nthings in long byte-strings. Currently, the only implementer of `Searcher` is `TwoWaySearcher`.","sig":null,"attributes":[{"value":"*\nA crate for string searching. The main trait is `Searcher`, which has a function for finding fixed\nthings in long byte-strings. Currently, the only implementer of `Searcher` is `TwoWaySearcher`.\n\n# Example\n\n```rust\nuse memmem::{Searcher, TwoWaySearcher};\nlet search = TwoWaySearcher::new(\"dog\".as_bytes());\nassert_eq!(search.search_in(\"The quick brown fox jumped over the lazy dog.\".as_bytes()), Some(41));\n```\n*/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":333,"byte_end":750,"line_start":9,"line_end":20,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":1711,"byte_end":1725,"line_start":18,"line_end":18,"column_start":12,"column_end":26},"name":"TwoWaySearcher","qualname":"::two_way::TwoWaySearcher","value":"TwoWaySearcher {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Searches for a substring using the \"two-way\" algorithm of Crochemore and Perrin, D.","sig":null,"attributes":[{"value":"/ Searches for a substring using the \"two-way\" algorithm of Crochemore and Perrin, D.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":1510,"byte_end":1597,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":1598,"byte_end":1601,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This implementation is basically copied from rust's standard library.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":1602,"byte_end":1675,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":6281,"byte_end":6284,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<TwoWaySearcher>::new","value":"pub fn new<'b>(&'b [u8]) -> TwoWaySearcher","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TwoWaySearcher` that can be used to search for `needle`.\n","sig":null,"attributes":[{"value":"/ Creates a new `TwoWaySearcher` that can be used to search for `needle`.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":6194,"byte_end":6269,"line_start":135,"line_end":135,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":31},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":905,"byte_end":913,"line_start":30,"line_end":30,"column_start":11,"column_end":19},"name":"Searcher","qualname":"::Searcher","value":"Searcher","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":" A trait that searches for patterns in byte-strings.\n","sig":null,"attributes":[{"value":"/ A trait that searches for patterns in byte-strings.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":839,"byte_end":894,"line_start":29,"line_end":29,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":1021,"byte_end":1030,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"search_in","qualname":"::Searcher::search_in","value":"pub fn search_in(&Self, &[u8]) -> Option<usize>","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" Search for something in a byte-string. Returns the starting index of the match, if found.\n","sig":null,"attributes":[{"value":"/ Search for something in a byte-string. Returns the starting index of the match, if found.","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/lib.rs","byte_start":920,"byte_end":1013,"line_start":31,"line_end":31,"column_start":5,"column_end":98}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":2271,"byte_end":2285,"line_start":39,"line_end":39,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":6169,"byte_end":6183,"line_start":134,"line_end":134,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":2271,"byte_end":2285,"line_start":39,"line_end":39,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":0,"index":31}},{"span":{"file_name":"/Users/bailej9/.cargo/registry/src/github.com-1ecc6299db9ec823/memmem-0.1.1/src/two_way.rs","byte_start":6169,"byte_end":6183,"line_start":134,"line_end":134,"column_start":10,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}}]}